const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createDataQuick() {
    try {
        console.log('üöÄ CREACI√ìN R√ÅPIDA DE DATOS P√öBLICOS');
        console.log('===================================\n');

        const MAIN_USER_ID = 'e7ed7c8d-229a-42d1-8a44-37bcc64c440c';
        const PUBLIC_USER_ID = '00000000-0000-0000-0000-000000000001';

        // 1. Crear algunos proyectos de ejemplo
        console.log('1Ô∏è‚É£ Creando proyectos de ejemplo...');

        const sampleProjects = [
            { name: 'Proyecto Demo 1', description: 'Proyecto de demostraci√≥n 1' },
            { name: 'Proyecto Demo 2', description: 'Proyecto de demostraci√≥n 2' },
            { name: 'Desarrollo Web', description: 'Proyecto de desarrollo web' },
            { name: 'Aplicaci√≥n Mobile', description: 'Desarrollo de app m√≥vil' },
            { name: 'Marketing Digital', description: 'Campa√±a de marketing' }
        ];

        const createdProjects = [];

        for (const project of sampleProjects) {
            const { data, error } = await supabase
                .from('projects')
                .insert([{
                    name: project.name,
                    description: project.description,
                    user_id: PUBLIC_USER_ID,
                    status: 'active'
                }])
                .select()
                .single();

            if (!error && data) {
                createdProjects.push(data);
                console.log(`‚úÖ Proyecto creado: ${data.name}`);
            } else {
                console.log(`‚ùå Error creando proyecto: ${error?.message}`);
            }
        }

        // 2. Crear algunas tareas de ejemplo
        console.log('\n2Ô∏è‚É£ Creando tareas de ejemplo...');

        const sampleTasks = [
            {
                title: 'Dise√±ar landing page',
                description: 'Crear el dise√±o de la p√°gina de inicio',
                status: 'in_progress',
                priority: 'high'
            },
            {
                title: 'Configurar base de datos',
                description: 'Configurar la base de datos del proyecto',
                status: 'pending',
                priority: 'medium'
            },
            {
                title: 'Implementar autenticaci√≥n',
                description: 'Sistema de login y registro',
                status: 'completed',
                priority: 'high'
            },
            {
                title: 'Crear documentaci√≥n',
                description: 'Documentar APIs y funcionalidades',
                status: 'pending',
                priority: 'low'
            },
            {
                title: 'Testing de la aplicaci√≥n',
                description: 'Pruebas unitarias y de integraci√≥n',
                status: 'paused',
                priority: 'medium'
            }
        ];

        const createdTasks = [];

        for (let i = 0; i < sampleTasks.length; i++) {
            const task = sampleTasks[i];
            const project = createdProjects[i % createdProjects.length]; // Rotar proyectos

            const { data, error } = await supabase
                .from('tasks')
                .insert([{
                    title: task.title,
                    description: task.description,
                    status: task.status,
                    priority: task.priority,
                    user_id: PUBLIC_USER_ID,
                    project_id: project?.id || null
                }])
                .select()
                .single();

            if (!error && data) {
                createdTasks.push(data);
                console.log(`‚úÖ Tarea creada: ${data.title}`);
            } else {
                console.log(`‚ùå Error creando tarea: ${error?.message}`);
            }
        }

        // 3. Verificar datos creados
        console.log('\n3Ô∏è‚É£ Verificando datos creados...');

        const { data: finalTasks } = await supabase
            .from('tasks')
            .select('*')
            .eq('user_id', PUBLIC_USER_ID);

        const { data: finalProjects } = await supabase
            .from('projects')
            .select('*')
            .eq('user_id', PUBLIC_USER_ID);

        console.log(`üìã Total tareas creadas: ${finalTasks?.length || 0}`);
        console.log(`üìÅ Total proyectos creados: ${finalProjects?.length || 0}`);

        // 4. Verificar acceso desde cliente p√∫blico
        console.log('\n4Ô∏è‚É£ Verificando acceso p√∫blico...');

        const publicClient = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        );

        const { data: publicTasks, error: publicError } = await publicClient
            .from('tasks')
            .select('*')
            .eq('user_id', PUBLIC_USER_ID);

        if (publicError) {
            console.log(`‚ùå Error acceso p√∫blico: ${publicError.message}`);
        } else {
            console.log(`‚úÖ Cliente p√∫blico puede ver: ${publicTasks?.length || 0} tareas`);
        }

        console.log('\nüéâ DATOS P√öBLICOS CREADOS EXITOSAMENTE!');
        console.log('=====================================');
        console.log(`üîë Usuario p√∫blico ID: ${PUBLIC_USER_ID}`);
        console.log(`üìã Tareas: ${finalTasks?.length || 0}`);
        console.log(`üìÅ Proyectos: ${finalProjects?.length || 0}`);
        console.log('');
        console.log('üìã SIGUIENTE PASO:');
        console.log('1. Cambia el import en page.tsx de TasksPageClient a TasksPageClientPublic');
        console.log('2. Refresca la aplicaci√≥n');
        console.log('3. Deber√≠as ver todos los datos sin necesidad de autenticaci√≥n');

    } catch (error) {
        console.error('üí• Error cr√≠tico:', error);
    }
}

// Ejecutar
console.log('üöÄ Iniciando creaci√≥n r√°pida...\n');
createDataQuick().then(() => {
    console.log('\n‚úÖ Proceso completado. Presiona Ctrl+C para salir.');
}).catch(console.error);
