const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createMinimalTestScenario() {
    console.log('üéØ Creando datos de prueba con esquema b√°sico...');
    
    try {
        // 1. Obtener el usuario actual
        const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers();
        if (usersError || !users.length) {
            throw new Error('No se encontr√≥ usuario: ' + (usersError?.message || 'Lista vac√≠a'));
        }
        
        const userId = users[0].id;
        console.log('‚úÖ Usuario encontrado:', userId);

        // 2. Crear cliente con campos b√°sicos
        const clientData = {
            user_id: userId,
            name: 'Mar√≠a Gonz√°lez Garc√≠a',
            email: 'maria.gonzalez@techsolutions.com',
            phone: '+34 666 777 888',
            company: 'TechSolutions Madrid S.L.'
        };

        const { data: client, error: clientError } = await supabase
            .from('clients')
            .upsert(clientData, { onConflict: 'email' })
            .select()
            .single();

        if (clientError) {
            console.log('Intentando crear cliente sin campo company...');
            delete clientData.company;
            const { data: client2, error: clientError2 } = await supabase
                .from('clients')
                .upsert(clientData, { onConflict: 'email' })
                .select()
                .single();
            
            if (clientError2) {
                console.log('Intentando con campos m√≠nimos...');
                const minimalClient = {
                    user_id: userId,
                    name: 'Mar√≠a Gonz√°lez Garc√≠a',
                    email: 'maria.gonzalez@techsolutions.com'
                };
                
                const { data: client3, error: clientError3 } = await supabase
                    .from('clients')
                    .upsert(minimalClient, { onConflict: 'email' })
                    .select()
                    .single();
                    
                if (clientError3) throw new Error('Error creando cliente m√≠nimo: ' + clientError3.message);
                console.log('‚úÖ Cliente creado (m√≠nimo):', client3.name);
                client = client3;
            } else {
                console.log('‚úÖ Cliente creado (sin company):', client2.name);
                client = client2;
            }
        } else {
            console.log('‚úÖ Cliente creado (completo):', client.name);
        }

        // 3. Crear proyecto b√°sico
        const projectData = {
            user_id: userId,
            client_id: client.id,
            name: 'Plataforma E-commerce Completa con IA',
            description: 'Desarrollo de una plataforma de comercio electr√≥nico completa con funcionalidades de IA para recomendaciones personalizadas, chatbot de atenci√≥n al cliente, an√°lisis predictivo de ventas y sistema de gesti√≥n de inventario automatizado.',
            status: 'in_progress',
            budget: 45000,
            start_date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
            end_date: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString()
        };

        const { data: project, error: projectError } = await supabase
            .from('projects')
            .insert(projectData)
            .select()
            .single();

        if (projectError) throw new Error('Error creando proyecto: ' + projectError.message);
        console.log('‚úÖ Proyecto creado:', project.name);

        // 4. Crear propuesta b√°sica
        const proposalData = {
            user_id: userId,
            client_id: client.id,
            title: 'Expansi√≥n Sistema E-commerce: M√≥dulo B2B y Analytics Avanzados',
            description: `Propuesta para la segunda fase del proyecto de e-commerce, incluyendo:

**M√ìDULO B2B EMPRESARIAL:**
- Portal dedicado para clientes corporativos
- Sistema de cotizaciones autom√°ticas
- Gesti√≥n de descuentos por volumen

**ANALYTICS E INTELIGENCIA DE NEGOCIO:**
- Dashboard ejecutivo con KPIs en tiempo real
- An√°lisis predictivo de demanda
- Reportes de rentabilidad por producto

**OPTIMIZACIONES ADICIONALES:**
- Implementaci√≥n de PWA (Progressive Web App)
- Sistema de reviews y reputaci√≥n
- Chatbot con IA conversacional (GPT-4)

Cronograma: 3 meses | Garant√≠a: 12 meses soporte`,
            value: 28500,
            currency: 'EUR',
            status: 'pending',
            valid_until: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString()
        };

        const { data: proposal, error: proposalError } = await supabase
            .from('proposals')
            .insert(proposalData)
            .select()
            .single();

        if (proposalError) throw new Error('Error creando propuesta: ' + proposalError.message);
        console.log('‚úÖ Propuesta creada:', proposal.title);

        // 5. Crear conversaci√≥n b√°sica
        const messagesData = [
            {
                user_id: userId,
                client_id: client.id,
                message: 'Buenos d√≠as Mar√≠a, te escribo para hacer seguimiento del proyecto de e-commerce. Hemos completado el 35% seg√∫n lo planificado, pero me gustar√≠a comentarte algunos puntos importantes sobre el desarrollo.',
                sender: 'freelancer',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: '¬øQu√© puntos quer√≠as comentar? Espero que no sean problemas graves...',
                sender: 'client',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `No son problemas graves, pero s√≠ situaciones que debemos gestionar:

1. **API de Recomendaciones**: La integraci√≥n con TensorFlow necesita 1 semana adicional para optimizar el rendimiento.

2. **Pasarelas de Pago**: Stripe ha actualizado su API y requiere cambios.

3. **Oportunidad de Mejora**: He identificado una optimizaci√≥n que podr√≠a reducir los tiempos de carga en un 40%.

¬øPodr√≠amos programar una call esta semana?`,
                sender: 'freelancer',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `Me preocupa el tema de la semana adicional... Tenemos fecha l√≠mite ajustada para Black Friday. El equipo directivo est√° muy pendiente.

¬øEsa semana afectar√≠a al cronograma general? Podemos hacer la call el mi√©rcoles a las 10:00.`,
                sender: 'client',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `Entiendo tu preocupaci√≥n. Datos concretos:

**CRONOGRAMA:**
- La semana adicional NO afecta la fecha de lanzamiento
- Podemos paralelizar tareas para recuperar tiempo
- Mantenemos el objetivo de Black Friday

**OPTIMIZACI√ìN:**
- Reducci√≥n 40% tiempo carga = +15% conversiones estimadas
- Ya planificada para el sprint actual

Perfecto para el mi√©rcoles 10:00. ¬øZoom?`,
                sender: 'freelancer',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `Zoom est√° bien. Me tranquiliza tu enfoque proactivo.

Una pregunta: ¬øser√≠a posible a√±adir un sistema de reviews con IA para analizar sentiment autom√°ticamente?

Tambi√©n, el CFO pregunta si hay posibilidad de alg√∫n descuento por el volumen de trabajo...`,
                sender: 'client',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `Excelente pregunta sobre el sistema de reviews con IA:

**SISTEMA DE REVIEWS + IA:**
- An√°lisis de sentiment autom√°tico
- Detecci√≥n de reviews falsas
- Estimaci√≥n: 12 horas (1.020‚Ç¨)

**DESCUENTO:**
- 5% descuento en facturaci√≥n restante del proyecto actual
- 10% descuento garantizado en la propuesta B2B

¬øTe parece justo?`,
                sender: 'freelancer',
                message_type: 'text',
                is_read: true,
                created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
            },
            {
                user_id: userId,
                client_id: client.id,
                message: `¬°Perfecto! Me parece muy razonable. El sistema de reviews con IA nos interesa mucho.

El CFO est√° de acuerdo con los descuentos. Tambi√©n est√° interesado en la propuesta B2B.

¬°Gracias por la gesti√≥n tan profesional! üí™`,
                sender: 'client',
                message_type: 'text',
                is_read: false,
                created_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString()
            }
        ];

        const { data: messages, error: messagesError } = await supabase
            .from('freelancer_messages')
            .insert(messagesData)
            .select();

        if (messagesError) throw new Error('Error creando mensajes: ' + messagesError.message);
        console.log('‚úÖ Mensajes creados:', messages.length);

        // Resumen final
        console.log('\nüéâ ¬°ESCENARIO DE PRUEBA B√ÅSICO CREADO EXITOSAMENTE!');
        console.log('');
        console.log('üìä DATOS CREADOS:');
        console.log(`   üë§ Cliente: ${client.name}`);
        console.log(`   üèóÔ∏è  Proyecto: ${project.name}`);
        console.log(`   üìã Propuesta: ${proposal.title} (‚Ç¨${proposal.value})`);
        console.log(`   üí¨ Conversaci√≥n: ${messages.length} mensajes`);
        console.log('');
        console.log('üéØ AUTOMATIZACIONES LISTAS:');
        console.log('   ‚ö†Ô∏è  Detector de Riesgos ‚Üí Seleccionar "Mar√≠a Gonz√°lez" ‚Üí "Plataforma E-commerce"');
        console.log('   üìä Analizador de Propuestas ‚Üí Seleccionar "Mar√≠a Gonz√°lez" ‚Üí "Expansi√≥n Sistema E-commerce"');
        console.log('   üß† An√°lisis de Conversaci√≥n ‚Üí Seleccionar "Mar√≠a Gonz√°lez"');
        console.log('   üé≠ An√°lisis de Sentimiento ‚Üí Usar √∫ltimo mensaje (positivo)');
        console.log('   üí¨ Optimizaci√≥n ‚Üí Responder al √∫ltimo mensaje');
        console.log('');
        console.log('üöÄ ¬°Ve a http://localhost:3000/dashboard/ai-automations para probar!');

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

createMinimalTestScenario();
