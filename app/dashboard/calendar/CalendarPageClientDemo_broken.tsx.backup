'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Sidebar from '@/components/Sidebar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { createSupabaseClient } from '@/src/lib/supabase-client';
import { 
    Calendar as CalendarIcon, 
    Clock, 
    Plus, 
    Play, 
    Pause, 
    MapPin, 
    Target, 
    TrendingUp,
    Users,
    DollarSign,
    Activity,
    CheckCircle,
    AlertCircle,
    Brain,
    Lightbulb,
    Zap,
    BarChart3,
    Filter,
    Search,
    Download,
    Share2,
    Bell,
    Star,
    Hash,
    Tag,
    ChevronLeft,
    ChevronRight,
    MoreHorizontal
} from 'lucide-react';
import { format, addDays, startOfWeek, endOfWeek, isToday, isSameDay, addHours, subHours } from 'date-fns';
import { es } from 'date-fns/locale';

// ==================== TIPOS ====================
interface CalendarEvent {
    id: string;
    title: string;
    description?: string;
    start_time: string;
    end_time: string;
    event_type: 'meeting' | 'task' | 'break' | 'focus' | 'client_call' | 'project_review' | 'planning' | 'development' | 'design_work' | 'admin' | 'work';
    status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';
    priority: 'low' | 'medium' | 'high';
    client_id?: string;
    project_id?: string;
    is_billable: boolean;
    tags: string[];
    location?: string;
    meeting_url?: string;
    hourly_rate?: number;
    created_at: string;
}

interface ExtendedCalendarEvent extends CalendarEvent {
    clients?: Client;
    projects?: Project;
}

interface Client {
    id: string;
    name: string;
    email: string;
    phone: string;
    company: string;
    created_at: string;
}

interface Project {
    id: string;
    client_id: string;
    name: string;
    description: string;
    status: string;
    budget: number;
    start_date: string;
    end_date: string;
    created_at: string;
}

interface DashboardMetrics {
    events_today: number;
    completed_today: number;
    revenue_today: number;
    billable_hours_today: number;
    events_this_week: number;
    avg_productivity_week: number;
    pending_insights: number;
}

// ==================== COMPONENTE PRINCIPAL ====================
export default function CalendarPageClientDemo() {
    // Estados principales
    const [events, setEvents] = useState<ExtendedCalendarEvent[]>([]);
    const [clients, setClients] = useState<Client[]>([]);
    const [projects, setProjects] = useState<Project[]>([]);
    const [currentDate, setCurrentDate] = useState(new Date());
    const [viewMode, setViewMode] = useState<'week' | 'month' | 'day'>('week');
    const [selectedDate, setSelectedDate] = useState<Date | null>(null);
    const [loading, setLoading] = useState(false);
    const [userEmail, setUserEmail] = useState('');

    // Estados de tracking
    const [activeTracking, setActiveTracking] = useState<string | null>(null);
    const [trackingTime, setTrackingTime] = useState(0);

    // Estados de formulario
    const [showEventForm, setShowEventForm] = useState(false);
    const [editingEvent, setEditingEvent] = useState<CalendarEvent | null>(null);
    const [newEvent, setNewEvent] = useState<Partial<CalendarEvent>>({
        title: '',
        description: '',
        start_time: '',
        end_time: '',
        event_type: 'meeting',
        priority: 'medium',
        is_billable: false,
        tags: []
    });

    // Estados de filtros
    const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
    const [filters, setFilters] = useState({
        client: '',
        project: '',
        status: '',
        type: ''
    });

    // Estados de IA y métricas
    const [dashboardMetrics, setDashboardMetrics] = useState<DashboardMetrics>({
        events_today: 0,
        completed_today: 0,
        revenue_today: 0,
        billable_hours_today: 0,
        events_this_week: 0,
        avg_productivity_week: 75,
        pending_insights: 3,
    });

    // Hook para manejar el router
    const router = useRouter();
    const supabase = createSupabaseClient();

    const handleLogout = async () => {
        if (!supabase) return;
        await supabase.auth.signOut();
        router.push('/login');
    };

    // ==================== EFECTOS ====================
    useEffect(() => {
        loadRealData();
    }, []);

    // ==================== FUNCIONES ====================
    const loadRealData = async () => {
        if (!supabase) return;
        
        try {
            setLoading(true);
            
            // Obtener usuario actual
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                router.push('/login');
                return;
            }

            setUserEmail(user.email || 'usuario@clyra.com');

            // Cargar eventos de calendario desde la base de datos
            const { data: calendarEvents, error: eventsError } = await supabase
                .from('calendar_events')
                .select(`
                    *,
                    clients (
                        id,
                        name,
                        email,
                        phone,
                        company
                    ),
                    projects (
                        id,
                        name,
                        description,
                        status,
                        budget
                    )
                `)
                .eq('user_id', user.id)
                .order('start_time', { ascending: true });

            if (eventsError) {
                console.error('Error loading calendar events:', eventsError);
                // Si no hay tabla de eventos, crear algunos datos básicos
                setEvents([]);
            } else {
                // Procesar eventos con datos relacionados
                const processedEvents: ExtendedCalendarEvent[] = (calendarEvents || []).map((event: any) => ({
                    ...event,
                    event_type: event.type || 'meeting',
                    priority: event.priority || 'medium', 
                    tags: event.tags || [],
                    clients: event.clients,
                    projects: event.projects
                }));
                setEvents(processedEvents);
            }

            // Cargar clientes desde la base de datos
            const { data: clientsData, error: clientsError } = await supabase
                .from('clients')
                .select('*')
                .eq('user_id', user.id)
                .order('created_at', { ascending: false });

            if (clientsError) {
                console.error('Error loading clients:', clientsError);
                setClients([]);
            } else {
                setClients(clientsData || []);
            }

            // Cargar proyectos desde la base de datos
            const { data: projectsData, error: projectsError } = await supabase
                .from('projects')
                .select('*')
                .eq('user_id', user.id)
                .order('created_at', { ascending: false });

            if (projectsError) {
                console.error('Error loading projects:', projectsError);
                setProjects([]);
            } else {
                setProjects(projectsData || []);
            }

            // Calcular métricas basadas en datos reales
            const today = new Date();
            const todayEvents = (calendarEvents || []).filter((event: any) => 
                isSameDay(new Date(event.start_time), today)
            );

            setDashboardMetrics({
                events_today: todayEvents.length,
                completed_today: todayEvents.filter((e: any) => e.status === 'completed').length,
                revenue_today: todayEvents.filter((e: any) => e.is_billable).reduce((sum: number, e: any) => sum + (e.actual_revenue || e.estimated_revenue || 0), 0),
                billable_hours_today: todayEvents.filter((e: any) => e.is_billable).reduce((sum: number, e: any) => sum + ((e.time_tracked || 120) / 60), 0),
                events_this_week: (calendarEvents || []).length,
                avg_productivity_week: 78,
                pending_insights: 3
            });
        } catch (error) {
            console.error('Error loading real data:', error);
        } finally {
            setLoading(false);
        }
    };

    const formatTrackingTime = (seconds: number) => {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    const handleCreateEvent = async () => {
        if (!newEvent.title || !newEvent.start_time || !newEvent.end_time || !supabase) return;

        try {
            setLoading(true);
            
            // Obtener usuario actual
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const eventData = {
                user_id: user.id,
                title: newEvent.title!,
                description: newEvent.description,
                start_time: newEvent.start_time!,
                end_time: newEvent.end_time!,
                type: newEvent.event_type || 'meeting',
                status: 'scheduled',
                priority: newEvent.priority || 'medium',
                client_id: newEvent.client_id || null,
                project_id: newEvent.project_id || null,
                is_billable: newEvent.is_billable || false,
                tags: newEvent.tags || [],
                created_at: new Date().toISOString()
            };

            const { data: createdEvent, error } = await supabase
                .from('calendar_events')
                .insert([eventData])
                .select(`
                    *,
                    clients (
                        id,
                        name,
                        email,
                        phone,
                        company
                    ),
                    projects (
                        id,
                        name,
                        description,
                        status,
                        budget
                    )
                `)
                .single();

            if (error) {
                console.error('Error creating event:', error);
                alert('Error al crear el evento: ' + error.message);
                return;
            }

            if (createdEvent) {
                // Agregar el nuevo evento al estado
                const processedEvent: ExtendedCalendarEvent = {
                    ...createdEvent,
                    event_type: createdEvent.type || 'meeting',
                    priority: createdEvent.priority || 'medium',
                    tags: createdEvent.tags || [],
                    clients: createdEvent.clients,
                    projects: createdEvent.projects
                };
                
                setEvents([...events, processedEvent]);
            }

            setShowEventForm(false);
            setNewEvent({
                title: '',
                description: '',
                start_time: '',
                end_time: '',
                event_type: 'meeting',
                priority: 'medium',
                is_billable: false,
                tags: []
            });
        } catch (error) {
            console.error('Error creating event:', error);
            alert('Error al crear el evento');
        } finally {
            setLoading(false);
        }
    };

    const renderWeekView = () => {
        const startOfCurrentWeek = startOfWeek(currentDate, { weekStartsOn: 1 });
        const days: Date[] = [];
        
        for (let i = 0; i < 7; i++) {
            days.push(addDays(startOfCurrentWeek, i));
        }

        const hours = Array.from({ length: 24 }, (_, i) => i);

        return (
            <div className="p-6">
                {/* Header con días de la semana */}
                <div className="grid grid-cols-8 gap-2 mb-4">
                    <div className="text-xs font-medium text-slate-500 text-center py-2">Hora</div>
                    {days.map((day, index) => (
                        <div key={index} className="text-center py-2 border-b border-slate-200">
                            <div className="text-xs font-medium text-slate-500 uppercase">
                                {format(day, 'EEE', { locale: es })}
                            </div>
                            <div className={`text-lg font-bold ${isToday(day) ? 'text-indigo-600' : 'text-slate-900'}`}>
                                {format(day, 'd')}
                            </div>
                        </div>
                    ))}
                </div>

                {/* Grid de horas */}
                <div className="max-h-96 overflow-y-auto">
                    <div className="grid grid-cols-8 gap-2">
                        {hours.map((hour) => (
                            <React.Fragment key={hour}>
                                <div className="text-xs text-slate-500 text-right pr-2 py-4 border-t border-slate-100">
                                    {hour.toString().padStart(2, '0')}:00
                                </div>
                                {days.map((day, dayIndex) => {
                                    const dayEvents = events.filter(event => {
                                        const eventDate = new Date(event.start_time);
                                        const eventHour = eventDate.getHours();
                                        return isSameDay(eventDate, day) && eventHour === hour;
                                    });

                                    return (
                                        <div 
                                            key={`${hour}-${dayIndex}`}
                                            className="min-h-12 border-t border-slate-100 relative cursor-pointer hover:bg-slate-50 transition-colors"
                                            onClick={() => {
                                                const newEventTime = new Date(day);
                                                newEventTime.setHours(hour, 0, 0, 0);
                                                const endTime = new Date(newEventTime);
                                                endTime.setHours(hour + 1, 0, 0, 0);
                                                
                                                setNewEvent({
                                                    ...newEvent,
                                                    start_time: newEventTime.toISOString().slice(0, 16),
                                                    end_time: endTime.toISOString().slice(0, 16)
                                                });
                                                setShowEventForm(true);
                                            }}
                                        >
                                            {dayEvents.map((event) => (
                                                <div 
                                                    key={event.id}
                                                    className="absolute inset-x-1 bg-indigo-100 border-l-4 border-indigo-500 rounded p-1 text-xs hover:bg-indigo-200 transition-colors cursor-pointer"
                                                    style={{ 
                                                        top: '2px',
                                                        height: 'calc(100% - 4px)'
                                                    }}
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        setEditingEvent(event);
                                                        setNewEvent(event);
                                                        setShowEventForm(true);
                                                    }}
                                                >
                                                    <div className="font-medium text-indigo-900 truncate">{event.title}</div>
                                                    {event.clients && (
                                                        <div className="text-indigo-700 truncate">{event.clients.name}</div>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    );
                                })}
                            </React.Fragment>
                        ))}
                    </div>
                </div>
            </div>
        );
    };

    const renderMonthView = () => {
        const monthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const monthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        const startDate = startOfWeek(monthStart, { weekStartsOn: 1 });
        const endDate = endOfWeek(monthEnd, { weekStartsOn: 1 });

        const days: Date[] = [];
        let day = startDate;
        
        while (day <= endDate) {
            days.push(day);
            day = addDays(day, 1);
        }

        const weeks = [];
        for (let i = 0; i < days.length; i += 7) {
            weeks.push(days.slice(i, i + 7));
        }

        return (
            <div className="p-6">
                {/* Header con días de la semana */}
                <div className="grid grid-cols-7 gap-2 mb-4">
                    {['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom'].map((dayName) => (
                        <div key={dayName} className="text-center text-sm font-medium text-slate-500 py-2">
                            {dayName}
                        </div>
                    ))}
                </div>

                {/* Grid del mes */}
                <div className="space-y-2">
                    {weeks.map((week, weekIndex) => (
                        <div key={weekIndex} className="grid grid-cols-7 gap-2">
                            {week.map((day, dayIndex) => {
                                const dayEvents = events.filter(event => 
                                    isSameDay(new Date(event.start_time), day)
                                );
                                const isCurrentMonth = day.getMonth() === currentDate.getMonth();
                                
                                return (
                                    <div 
                                        key={dayIndex}
                                        className={`min-h-24 p-2 border border-slate-200 rounded-lg cursor-pointer hover:bg-slate-50 transition-colors ${
                                            !isCurrentMonth ? 'bg-slate-50 text-slate-400' : 'bg-white'
                                        } ${isToday(day) ? 'ring-2 ring-indigo-500' : ''}`}
                                        onClick={() => {
                                            const newEventTime = new Date(day);
                                            newEventTime.setHours(9, 0, 0, 0);
                                            const endTime = new Date(newEventTime);
                                            endTime.setHours(10, 0, 0, 0);
                                            
                                            setNewEvent({
                                                ...newEvent,
                                                start_time: newEventTime.toISOString().slice(0, 16),
                                                end_time: endTime.toISOString().slice(0, 16)
                                            });
                                            setShowEventForm(true);
                                        }}
                                    >
                                        <div className={`text-sm font-medium ${isToday(day) ? 'text-indigo-600' : ''}`}>
                                            {format(day, 'd')}
                                        </div>
                                        <div className="space-y-1 mt-1">
                                            {dayEvents.slice(0, 2).map((event) => (
                                                <div 
                                                    key={event.id}
                                                    className="text-xs p-1 bg-indigo-100 text-indigo-800 rounded truncate cursor-pointer hover:bg-indigo-200"
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        setEditingEvent(event);
                                                        setNewEvent(event);
                                                        setShowEventForm(true);
                                                    }}
                                                >
                                                    {event.title}
                                                </div>
                                            ))}
                                            {dayEvents.length > 2 && (
                                                <div className="text-xs text-slate-500">
                                                    +{dayEvents.length - 2} más
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    ))}
                </div>
            </div>
        );
    };

    const renderDayView = () => {
        const hours = Array.from({ length: 24 }, (_, i) => i);
        const dayEvents = events.filter(event => 
            isSameDay(new Date(event.start_time), currentDate)
        );

        return (
            <div className="p-6">
                <div className="mb-6">
                    <h3 className="text-xl font-bold text-slate-900">
                        {format(currentDate, "EEEE, d 'de' MMMM", { locale: es })}
                    </h3>
                    <p className="text-slate-600">{dayEvents.length} eventos programados</p>
                </div>

                <div className="max-h-96 overflow-y-auto">
                    {hours.map((hour) => {
                        const hourEvents = dayEvents.filter(event => {
                            const eventHour = new Date(event.start_time).getHours();
                            return eventHour === hour;
                        });

                        return (
                            <div 
                                key={hour}
                                className="flex border-t border-slate-100 hover:bg-slate-50 transition-colors cursor-pointer"
                                onClick={() => {
                                    const newEventTime = new Date(currentDate);
                                    newEventTime.setHours(hour, 0, 0, 0);
                                    const endTime = new Date(newEventTime);
                                    endTime.setHours(hour + 1, 0, 0, 0);
                                    
                                    setNewEvent({
                                        ...newEvent,
                                        start_time: newEventTime.toISOString().slice(0, 16),
                                        end_time: endTime.toISOString().slice(0, 16)
                                    });
                                    setShowEventForm(true);
                                }}
                            >
                                <div className="w-20 text-xs text-slate-500 text-right pr-4 py-4">
                                    {hour.toString().padStart(2, '0')}:00
                                </div>
                                <div className="flex-1 min-h-16 relative py-2">
                                    {hourEvents.map((event) => (
                                        <div 
                                            key={event.id}
                                            className="mb-2 p-3 bg-indigo-100 border-l-4 border-indigo-500 rounded-r-lg cursor-pointer hover:bg-indigo-200 transition-colors"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                setEditingEvent(event);
                                                setNewEvent(event);
                                                setShowEventForm(true);
                                            }}
                                        >
                                            <div className="font-medium text-indigo-900">{event.title}</div>
                                            <div className="text-sm text-indigo-700">
                                                {format(new Date(event.start_time), 'HH:mm')} - {format(new Date(event.end_time), 'HH:mm')}
                                            </div>
                                            {event.clients && (
                                                <div className="text-sm text-indigo-600">{event.clients.name}</div>
                                            )}
                                            {event.description && (
                                                <div className="text-xs text-indigo-600 mt-1">{event.description}</div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
                    <p className="text-slate-600">Cargando datos del calendario...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
            <div className="flex">
                {/* Sidebar */}
                <Sidebar userEmail={userEmail} onLogout={handleLogout} />
                
                {/* Contenido principal */}
                <main className="flex-1 ml-64 p-8">
                    <div className="max-w-7xl mx-auto space-y-6">
                        {/* Header con métricas mejorado */}
                        <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-violet-600 rounded-2xl p-8 text-white shadow-2xl shadow-indigo-500/25">
                            <div className="flex items-center justify-between mb-6">
                                <div>
                                    <h1 className="text-3xl font-bold mb-2 flex items-center gap-3">
                                        <CalendarIcon className="w-8 h-8" />
                                        Calendario
                                    </h1>
                                    <p className="text-indigo-100 text-lg">
                                        {format(currentDate, "EEEE, d 'de' MMMM 'de' yyyy", { locale: es })}
                                    </p>
                                </div>
                                <div className="flex items-center space-x-4">
                                    {activeTracking && (
                                        <div className="bg-white/20 backdrop-blur-lg rounded-xl px-6 py-3 border border-white/30">
                                            <div className="flex items-center space-x-3">
                                                <div className="w-4 h-4 bg-red-400 rounded-full animate-pulse shadow-lg shadow-red-500/50"></div>
                                                <span className="font-mono text-xl font-semibold">
                                                    {formatTrackingTime(trackingTime)}
                                                </span>
                                            </div>
                                        </div>
                                    )}
                                    <Button 
                                        onClick={() => setShowEventForm(true)}
                                        className="bg-white/95 backdrop-blur-lg text-indigo-600 hover:bg-white border border-white/30 shadow-lg hover:shadow-xl transition-all duration-200 px-6 py-3 font-semibold"
                                    >
                                        <Plus className="w-5 h-5 mr-2" />
                                        Nuevo Evento
                                    </Button>
                                </div>
                            </div>

                            {/* Métricas rápidas */}
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="flex items-center gap-3">
                                        <div className="w-10 h-10 bg-emerald-500/20 rounded-lg flex items-center justify-center">
                                            <CalendarIcon className="w-5 h-5 text-emerald-300" />
                                        </div>
                                        <div>
                                            <p className="text-indigo-100 text-sm">Eventos Hoy</p>
                                            <p className="text-white text-xl font-bold">{dashboardMetrics.events_today}</p>
                                        </div>
                                    </div>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="flex items-center gap-3">
                                        <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center">
                                            <CheckCircle className="w-5 h-5 text-blue-300" />
                                        </div>
                                        <div>
                                            <p className="text-indigo-100 text-sm">Completados</p>
                                            <p className="text-white text-xl font-bold">{dashboardMetrics.completed_today}</p>
                                        </div>
                                    </div>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="flex items-center gap-3">
                                        <div className="w-10 h-10 bg-amber-500/20 rounded-lg flex items-center justify-center">
                                            <Clock className="w-5 h-5 text-amber-300" />
                                        </div>
                                        <div>
                                            <p className="text-indigo-100 text-sm">Horas Facturables</p>
                                            <p className="text-white text-xl font-bold">{dashboardMetrics.billable_hours_today.toFixed(1)}h</p>
                                        </div>
                                    </div>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="flex items-center gap-3">
                                        <div className="w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center">
                                            <DollarSign className="w-5 h-5 text-green-300" />
                                        </div>
                                        <div>
                                            <p className="text-indigo-100 text-sm">Ingresos Hoy</p>
                                            <p className="text-white text-xl font-bold">€{dashboardMetrics.revenue_today.toFixed(0)}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Controles de vista y filtros */}
                        <div className="bg-white/95 backdrop-blur-lg rounded-xl shadow-lg border border-slate-200/60 p-6">
                            <div className="flex flex-wrap items-center justify-between gap-4">
                                <div className="flex items-center space-x-4">
                                    <div className="flex items-center bg-slate-100/80 rounded-lg p-1">
                                        <Button
                                            onClick={() => setViewMode('day')}
                                            variant={viewMode === 'day' ? 'default' : 'ghost'}
                                            size="sm"
                                            className={viewMode === 'day' ? 'bg-indigo-600 text-white shadow-md' : 'text-slate-600 hover:bg-slate-200'}
                                        >
                                            Día
                                        </Button>
                                        <Button
                                            onClick={() => setViewMode('week')}
                                            variant={viewMode === 'week' ? 'default' : 'ghost'}
                                            size="sm"
                                            className={viewMode === 'week' ? 'bg-indigo-600 text-white shadow-md' : 'text-slate-600 hover:bg-slate-200'}
                                        >
                                            Semana
                                        </Button>
                                        <Button
                                            onClick={() => setViewMode('month')}
                                            variant={viewMode === 'month' ? 'default' : 'ghost'}
                                            size="sm"
                                            className={viewMode === 'month' ? 'bg-indigo-600 text-white shadow-md' : 'text-slate-600 hover:bg-slate-200'}
                                        >
                                            Mes
                                        </Button>
                                    </div>
                                    
                                    <div className="flex items-center space-x-2">
                                        <Button
                                            onClick={() => setCurrentDate(addDays(currentDate, viewMode === 'month' ? -30 : viewMode === 'week' ? -7 : -1))}
                                            variant="ghost"
                                            size="sm"
                                            className="text-slate-600 hover:bg-slate-100"
                                        >
                                            <ChevronLeft className="w-4 h-4" />
                                        </Button>
                                        <Button
                                            onClick={() => setCurrentDate(new Date())}
                                            variant="ghost"
                                            size="sm"
                                            className="text-slate-600 hover:bg-slate-100 font-medium"
                                        >
                                            Hoy
                                        </Button>
                                        <Button
                                            onClick={() => setCurrentDate(addDays(currentDate, viewMode === 'month' ? 30 : viewMode === 'week' ? 7 : 1))}
                                            variant="ghost"
                                            size="sm"
                                            className="text-slate-600 hover:bg-slate-100"
                                        >
                                            <ChevronRight className="w-4 h-4" />
                                        </Button>
                                    </div>
                                </div>

                                <div className="flex items-center space-x-3">
                                    <div className="relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                                        <Input
                                            placeholder="Buscar eventos..."
                                            className="pl-10 bg-slate-50/80 border-slate-200/60 focus:bg-white"
                                        />
                                    </div>
                                    <Button variant="ghost" size="sm" className="text-slate-600 hover:bg-slate-100">
                                        <Filter className="w-4 h-4" />
                                    </Button>
                                    <Button variant="ghost" size="sm" className="text-slate-600 hover:bg-slate-100">
                                        <MoreHorizontal className="w-4 h-4" />
                                    </Button>
                                </div>
                            </div>
                        </div>

                        {/* Vista de calendario principal */}
                        <div className="bg-white/95 backdrop-blur-lg rounded-xl shadow-lg border border-slate-200/60">
                            {viewMode === 'week' && renderWeekView()}
                            {viewMode === 'month' && renderMonthView()}
                            {viewMode === 'day' && renderDayView()}
                        </div>

                        {/* Panel lateral con insights */}
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            <div className="lg:col-span-2">
                                {/* Contenido del calendario se renderiza aquí */}
                                {events.length === 0 ? (
                                    <Card className="bg-white/95 backdrop-blur-lg border-slate-200/60 shadow-lg">
                                        <CardContent className="p-8 text-center">
                                            <CalendarIcon className="w-16 h-16 mx-auto mb-4 text-slate-300" />
                                            <h3 className="text-lg font-semibold text-slate-900 mb-2">No hay eventos</h3>
                                            <p className="text-slate-600 mb-4">
                                                No tienes eventos programados en tu calendario. Crea tu primer evento para empezar.
                                            </p>
                                            <Button 
                                                onClick={() => setShowEventForm(true)}
                                                className="bg-indigo-600 hover:bg-indigo-700"
                                            >
                                                <Plus className="w-4 h-4 mr-2" />
                                                Crear Primer Evento
                                            </Button>
                                        </CardContent>
                                    </Card>
                                ) : (
                                    <Card className="bg-white/95 backdrop-blur-lg border-slate-200/60 shadow-lg">
                                        <CardHeader>
                                            <CardTitle className="text-lg font-bold text-slate-900">
                                                Eventos Recientes
                                            </CardTitle>
                                        </CardHeader>
                                        <CardContent className="space-y-3">
                                            {events.slice(0, 5).map((event) => (
                                                <div key={event.id} className="p-4 bg-slate-50/80 rounded-lg border border-slate-200/60 hover:shadow-md transition-shadow">
                                                    <div className="flex items-center justify-between mb-2">
                                                        <h4 className="font-semibold text-slate-900">{event.title}</h4>
                                                        <span className={`text-xs px-2 py-1 rounded-full ${
                                                            event.status === 'completed' ? 'bg-green-100 text-green-700' :
                                                            event.status === 'in_progress' ? 'bg-blue-100 text-blue-700' :
                                                            event.status === 'cancelled' ? 'bg-red-100 text-red-700' :
                                                            'bg-gray-100 text-gray-700'
                                                        }`}>
                                                            {event.status}
                                                        </span>
                                                    </div>
                                                    {event.description && (
                                                        <p className="text-sm text-slate-600 mb-2">{event.description}</p>
                                                    )}
                                                    <div className="flex items-center gap-4 text-sm text-slate-500">
                                                        <div className="flex items-center gap-1">
                                                            <Clock className="w-3 h-3" />
                                                            <span>{format(new Date(event.start_time), 'HH:mm')} - {format(new Date(event.end_time), 'HH:mm')}</span>
                                                        </div>
                                                        {event.clients && (
                                                            <div className="flex items-center gap-1">
                                                                <Users className="w-3 h-3" />
                                                                <span>{event.clients.name}</span>
                                                            </div>
                                                        )}
                                                        {event.is_billable && (
                                                            <div className="flex items-center gap-1">
                                                                <DollarSign className="w-3 h-3 text-green-600" />
                                                                <span className="text-green-600">Facturable</span>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            ))}
                                        </CardContent>
                                    </Card>
                                )}
                            </div>
                            
                            <div className="space-y-6">
                                {/* Eventos próximos */}
                                <Card className="bg-white/95 backdrop-blur-lg border-slate-200/60 shadow-lg">
                                    <CardHeader className="pb-4">
                                        <CardTitle className="text-lg font-bold text-slate-900 flex items-center gap-2">
                                            <Clock className="w-5 h-5 text-indigo-600" />
                                            Próximos Eventos
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-3">
                                        {events.slice(0, 3).map((event) => (
                                            <div key={event.id} className="p-3 bg-slate-50/80 rounded-lg border border-slate-200/60 hover:shadow-md transition-shadow">
                                                <div className="flex items-center justify-between mb-2">
                                                    <h4 className="font-semibold text-slate-900 text-sm">{event.title}</h4>
                                                    <span className={`text-xs px-2 py-1 rounded-full ${
                                                        event.priority === 'high' ? 'bg-red-100 text-red-700' :
                                                        event.priority === 'medium' ? 'bg-amber-100 text-amber-700' :
                                                        'bg-green-100 text-green-700'
                                                    }`}>
                                                        {event.priority}
                                                    </span>
                                                </div>
                                                <p className="text-xs text-slate-600 mb-2">{event.description}</p>
                                                <div className="flex items-center gap-2 text-xs text-slate-500">
                                                    <Clock className="w-3 h-3" />
                                                    <span>{format(new Date(event.start_time), 'HH:mm')} - {format(new Date(event.end_time), 'HH:mm')}</span>
                                                </div>
                                            </div>
                                        ))}
                                        {events.length === 0 && (
                                            <div className="text-center py-4 text-slate-500 text-sm">
                                                No hay eventos próximos
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>

                                {/* Insights de IA */}
                                <Card className="bg-gradient-to-br from-indigo-50 via-purple-50 to-violet-50 border-indigo-200/60 shadow-lg">
                                    <CardHeader className="pb-4">
                                        <CardTitle className="text-lg font-bold text-slate-900 flex items-center gap-2">
                                            <Brain className="w-5 h-5 text-indigo-600" />
                                            Insights
                                            <span className="ml-auto text-xs bg-indigo-100 text-indigo-700 px-2 py-1 rounded-full">
                                                {dashboardMetrics.pending_insights} nuevos
                                            </span>
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-3">
                                        <div className="p-3 bg-white/80 rounded-lg border border-indigo-200/60">
                                            <div className="flex items-start gap-3">
                                                <div className="w-8 h-8 bg-gradient-to-br from-emerald-500 to-green-600 rounded-lg flex items-center justify-center">
                                                    <TrendingUp className="w-4 h-4 text-white" />
                                                </div>
                                                <div className="flex-1">
                                                    <h4 className="font-semibold text-slate-900 text-sm mb-1">Calendario Optimizado</h4>
                                                    <p className="text-xs text-slate-600">Tu calendario está conectado con datos reales. Crea eventos para ver análisis detallados.</p>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div className="p-3 bg-white/80 rounded-lg border border-indigo-200/60">
                                            <div className="flex items-start gap-3">
                                                <div className="w-8 h-8 bg-gradient-to-br from-amber-500 to-orange-600 rounded-lg flex items-center justify-center">
                                                    <Lightbulb className="w-4 h-4 text-white" />
                                                </div>
                                                <div className="flex-1">
                                                    <h4 className="font-semibold text-slate-900 text-sm mb-1">Integración Completa</h4>
                                                    <p className="text-xs text-slate-600">Los eventos se sincronizarán con tus clientes y proyectos automáticamente.</p>
                                                </div>
                                            </div>
                                        </div>
                                    </CardContent>
                                </Card>
                            </div>
                        </div>

                        {/* Modal de formulario para eventos */}
                        {showEventForm && (
                            <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                                    <div className="p-6">
                                        <h3 className="text-xl font-bold text-slate-900 mb-6">
                                            {editingEvent ? 'Editar Evento' : 'Nuevo Evento'}
                                        </h3>
                                        
                                        <div className="space-y-6">
                                            {/* Información básica */}
                                            <div className="grid grid-cols-1 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Título</label>
                                                    <Input
                                                        value={newEvent.title || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, title: e.target.value})}
                                                        placeholder="Título del evento"
                                                        className="w-full"
                                                    />
                                                </div>
                                                
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Descripción</label>
                                                    <textarea
                                                        value={newEvent.description || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, description: e.target.value})}
                                                        placeholder="Descripción del evento"
                                                        rows={3}
                                                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    />
                                                </div>
                                            </div>

                                            {/* Tiempo */}
                                            <div className="grid grid-cols-2 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Hora inicio</label>
                                                    <Input
                                                        type="datetime-local"
                                                        value={newEvent.start_time || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, start_time: e.target.value})}
                                                        className="w-full"
                                                    />
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Hora fin</label>
                                                    <Input
                                                        type="datetime-local"
                                                        value={newEvent.end_time || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, end_time: e.target.value})}
                                                        className="w-full"
                                                    />
                                                </div>
                                            </div>

                                            {/* Tipo y categorización */}
                                            <div className="grid grid-cols-2 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Tipo de evento</label>
                                                    <select
                                                        value={newEvent.event_type || 'meeting'}
                                                        onChange={(e) => setNewEvent({...newEvent, event_type: e.target.value as any})}
                                                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    >
                                                        <option value="meeting">Reunión</option>
                                                        <option value="work">Trabajo</option>
                                                        <option value="break">Descanso</option>
                                                        <option value="focus">Trabajo Concentrado</option>
                                                        <option value="client_call">Llamada con Cliente</option>
                                                        <option value="project_review">Revisión de Proyecto</option>
                                                        <option value="planning">Planificación</option>
                                                        <option value="development">Desarrollo</option>
                                                        <option value="design_work">Trabajo de Diseño</option>
                                                        <option value="admin">Administración</option>
                                                    </select>
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Prioridad</label>
                                                    <select
                                                        value={newEvent.priority || 'medium'}
                                                        onChange={(e) => setNewEvent({...newEvent, priority: e.target.value as any})}
                                                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    >
                                                        <option value="low">Baja</option>
                                                        <option value="medium">Media</option>
                                                        <option value="high">Alta</option>
                                                    </select>
                                                </div>
                                            </div>

                                            {/* Cliente y proyecto */}
                                            <div className="grid grid-cols-2 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Cliente</label>
                                                    <select
                                                        value={newEvent.client_id || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, client_id: e.target.value})}
                                                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    >
                                                        <option value="">Seleccionar cliente (opcional)</option>
                                                        {clients.map((client) => (
                                                            <option key={client.id} value={client.id}>
                                                                {client.name} - {client.company}
                                                            </option>
                                                        ))}
                                                    </select>
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Proyecto</label>
                                                    <select
                                                        value={newEvent.project_id || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, project_id: e.target.value})}
                                                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                    >
                                                        <option value="">Seleccionar proyecto (opcional)</option>
                                                        {projects.map((project) => (
                                                            <option key={project.id} value={project.id}>
                                                                {project.name}
                                                            </option>
                                                        ))}
                                                    </select>
                                                </div>
                                            </div>

                                            {/* Ubicación y URL */}
                                            <div className="grid grid-cols-2 gap-4">
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">Ubicación</label>
                                                    <Input
                                                        value={newEvent.location || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, location: e.target.value})}
                                                        placeholder="Ubicación del evento"
                                                        className="w-full"
                                                    />
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-slate-700 mb-2">URL de reunión</label>
                                                    <Input
                                                        value={newEvent.meeting_url || ''}
                                                        onChange={(e) => setNewEvent({...newEvent, meeting_url: e.target.value})}
                                                        placeholder="https://meet.google.com/..."
                                                        className="w-full"
                                                    />
                                                </div>
                                            </div>

                                            {/* Facturación */}
                                            <div className="bg-slate-50 p-4 rounded-lg">
                                                <h4 className="font-medium text-slate-900 mb-3">Información de facturación</h4>
                                                <div className="space-y-3">
                                                    <div className="flex items-center space-x-2">
                                                        <input
                                                            type="checkbox"
                                                            id="is_billable"
                                                            checked={newEvent.is_billable || false}
                                                            onChange={(e) => setNewEvent({...newEvent, is_billable: e.target.checked})}
                                                            className="rounded border-slate-300 text-indigo-600 focus:ring-indigo-500"
                                                        />
                                                        <label htmlFor="is_billable" className="text-sm font-medium text-slate-700">
                                                            Evento facturable
                                                        </label>
                                                    </div>
                                                    {newEvent.is_billable && (
                                                        <div>
                                                            <label className="block text-sm font-medium text-slate-700 mb-2">Tarifa por hora (€)</label>
                                                            <Input
                                                                type="number"
                                                                value={newEvent.hourly_rate || ''}
                                                                onChange={(e) => setNewEvent({...newEvent, hourly_rate: parseFloat(e.target.value) || 0})}
                                                                placeholder="75"
                                                                className="w-full"
                                                            />
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            {/* Tags */}
                                            <div>
                                                <label className="block text-sm font-medium text-slate-700 mb-2">Tags (separados por comas)</label>
                                                <Input
                                                    value={(newEvent.tags || []).join(', ')}
                                                    onChange={(e) => setNewEvent({
                                                        ...newEvent, 
                                                        tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0)
                                                    })}
                                                    placeholder="importante, urgente, cliente-vip"
                                                    className="w-full"
                                                />
                                            </div>
                                        </div>
                                        
                                        <div className="flex gap-3 pt-6 border-t border-slate-200 mt-6">
                                            <Button
                                                onClick={() => {
                                                    setShowEventForm(false);
                                                    setEditingEvent(null);
                                                    setNewEvent({
                                                        title: '',
                                                        description: '',
                                                        start_time: '',
                                                        end_time: '',
                                                        event_type: 'meeting',
                                                        priority: 'medium',
                                                        is_billable: false,
                                                        tags: []
                                                    });
                                                }}
                                                variant="ghost"
                                                className="flex-1"
                                            >
                                                Cancelar
                                            </Button>
                                            <Button
                                                onClick={handleCreateEvent}
                                                className="flex-1 bg-indigo-600 hover:bg-indigo-700"
                                            >
                                                {editingEvent ? 'Actualizar' : 'Crear'}
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                                            <Button
                                                onClick={() => setShowEventForm(false)}
                                                variant="ghost"
                                                className="flex-1"
                                                disabled={loading}
                                            >
                                                Cancelar
                                            </Button>
                                            <Button
                                                onClick={handleCreateEvent}
                                                className="flex-1 bg-indigo-600 hover:bg-indigo-700"
                                                disabled={loading}
                                            >
                                                {loading ? 'Creando...' : (editingEvent ? 'Actualizar' : 'Crear')}
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </main>
            </div>
        </div>
    );
}
