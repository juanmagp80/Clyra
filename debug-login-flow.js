// Script para diagnosticar el flujo de login
// Prueba el sistema de autenticaci√≥n paso a paso

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function debugLoginFlow() {
  try {
    console.log('üîç DIAGN√ìSTICO DEL FLUJO DE LOGIN');
    console.log('=================================');
    
    // 1. Verificar configuraci√≥n de Supabase
    console.log('üìã 1. VERIFICACI√ìN DE CONFIGURACI√ìN:');
    console.log('====================================');
    
    const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    
    console.log(`URL: ${url ? url.substring(0, 20) + '...' : 'NO CONFIGURADA'}`);
    console.log(`Key: ${key ? key.substring(0, 20) + '...' : 'NO CONFIGURADA'}`);
    
    if (!url || !key) {
      console.log('‚ùå Supabase no est√° configurado correctamente');
      return;
    }
    
    console.log('‚úÖ Configuraci√≥n de Supabase correcta');
    console.log('');
    
    // 2. Verificar conexi√≥n con Supabase
    console.log('üìã 2. VERIFICACI√ìN DE CONEXI√ìN:');
    console.log('==============================');
    
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('count', { count: 'exact' })
      .limit(1);
    
    if (testError) {
      console.log('‚ùå Error conectando con Supabase:', testError.message);
      return;
    }
    
    console.log('‚úÖ Conexi√≥n con Supabase exitosa');
    console.log('');
    
    // 3. Verificar usuarios existentes
    console.log('üìã 3. USUARIOS EXISTENTES:');
    console.log('=========================');
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ùå Error obteniendo usuarios:', usersError.message);
      console.log('üí° Nota: Esto requiere service_role key, usando anon key para test b√°sico');
    } else {
      console.log(`üìä Total de usuarios: ${users.users.length}`);
      
      users.users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.email} - ${user.email_confirmed_at ? 'Confirmado' : 'Pendiente confirmaci√≥n'}`);
      });
    }
    
    console.log('');
    
    // 4. Verificar sesi√≥n actual
    console.log('üìã 4. SESI√ìN ACTUAL:');
    console.log('===================');
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Error obteniendo sesi√≥n:', sessionError.message);
    } else if (session) {
      console.log('‚úÖ Hay una sesi√≥n activa');
      console.log(`üë§ Usuario: ${session.user.email}`);
      console.log(`‚è∞ Expira: ${new Date(session.expires_at * 1000).toLocaleString('es-ES')}`);
    } else {
      console.log('‚ö†Ô∏è No hay sesi√≥n activa');
    }
    
    console.log('');
    
    // 5. Test de login (solo si no hay sesi√≥n)
    console.log('üìã 5. TEST DE LOGIN:');
    console.log('===================');
    
    // Usar credenciales de prueba
    const testEmail = 'juangpdev@gmail.com'; // Email que sabemos que existe
    const testPassword = 'password123'; // Contrase√±a de prueba
    
    console.log(`üß™ Probando login con: ${testEmail}`);
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (loginError) {
      console.log('‚ùå Error en login:', loginError.message);
      
      if (loginError.message.includes('Invalid login credentials')) {
        console.log('üí° Credenciales incorrectas - esto es normal para el test');
      } else if (loginError.message.includes('Email not confirmed')) {
        console.log('üí° Email no confirmado - revisar confirmaci√≥n de email');
      }
    } else if (loginData.session) {
      console.log('‚úÖ Login exitoso!');
      console.log(`üë§ Usuario: ${loginData.user.email}`);
      console.log(`üÜî User ID: ${loginData.user.id}`);
      console.log(`üìß Email confirmado: ${loginData.user.email_confirmed_at ? 'S√≠' : 'No'}`);
      
      // Probar logout
      console.log('');
      console.log('üß™ Probando logout...');
      const { error: logoutError } = await supabase.auth.signOut();
      
      if (logoutError) {
        console.log('‚ùå Error en logout:', logoutError.message);
      } else {
        console.log('‚úÖ Logout exitoso');
      }
    }
    
    // 6. Recomendaciones
    console.log('');
    console.log('üìã RECOMENDACIONES PARA SOLUCIONAR PROBLEMAS:');
    console.log('============================================');
    
    console.log('üîß Si el login no funciona en la aplicaci√≥n:');
    console.log('1. Reiniciar el servidor de desarrollo (npm run dev)');
    console.log('2. Limpiar cache del navegador (Ctrl+Shift+R)');
    console.log('3. Verificar que no hay errores de CORS');
    console.log('4. Revisar que el middleware no est√© bloqueando la sesi√≥n');
    console.log('5. Confirmar que el email del usuario est√© verificado');
    console.log('');
    console.log('üõ†Ô∏è Para depurar m√°s:');
    console.log('- Revisar Network tab en DevTools');
    console.log('- Verificar cookies de sesi√≥n de Supabase');
    console.log('- Comprobar logs del servidor Next.js');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  }
}

// Ejecutar diagn√≥stico
debugLoginFlow();
