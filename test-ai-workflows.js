// Script de prueba para Workflows Autom√°ticos con IA
// Ejecutar con: node test-ai-workflows.js

async function testWorkflows() {
    const baseUrl = 'http://localhost:3000';
    
    console.log('üîÑ Probando Workflows Autom√°ticos con IA...\n');
    
    // Prueba 1: Email Inteligente - Contrato Firmado
    console.log('üìß Prueba 1: Email Inteligente - Contrato Firmado');
    try {
        const emailData = {
            type: 'smart_email',
            data: {
                trigger: 'contract_signed',
                context: {
                    client: {
                        name: 'Mar√≠a Gonz√°lez',
                        company: 'TechStart SA'
                    },
                    contract: {
                        value: 8500,
                        project: 'Desarrollo de App M√≥vil',
                        startDate: '2024-09-10'
                    }
                }
            },
            userId: 'test@example.com'
        };
        
        const response = await fetch(`${baseUrl}/api/ai/automations/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(emailData)
        });
        
        const result = await response.json();
        console.log('‚úÖ Email generado exitosamente:');
        console.log('   üì¨ Asunto:', result.email?.subject);
        console.log('   üéØ Tono:', result.email?.tone);
        console.log('   üìã Pr√≥ximos pasos:', result.email?.next_steps?.slice(0, 2).join(', '));
        console.log('');
    } catch (error) {
        console.log('‚ùå Error:', error.message);
        console.log('');
    }
    
    // Prueba 2: Formulario Din√°mico - Brief de Proyecto
    console.log('üìã Prueba 2: Formulario Din√°mico - Brief de Proyecto');
    try {
        const formData = {
            type: 'dynamic_form',
            data: {
                purpose: 'project_brief',
                context: {
                    projectType: 'Ecommerce',
                    budget: 15000,
                    timeline: '4 meses',
                    clientIndustry: 'Retail Fashion'
                }
            },
            userId: 'test@example.com'
        };
        
        const response = await fetch(`${baseUrl}/api/ai/automations/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        console.log('‚úÖ Formulario generado exitosamente:');
        console.log('   üìù T√≠tulo:', result.form?.title);
        console.log('   ‚è±Ô∏è Tiempo estimado:', result.form?.estimated_time);
        console.log('   üìä Campos generados:', result.form?.fields?.length || 0);
        console.log('');
    } catch (error) {
        console.log('‚ùå Error:', error.message);
        console.log('');
    }
    
    // Prueba 3: Reuni√≥n Inteligente - Kickoff de Proyecto
    console.log('üóìÔ∏è Prueba 3: Reuni√≥n Inteligente - Kickoff de Proyecto');
    try {
        const meetingData = {
            type: 'smart_meeting',
            data: {
                purpose: 'project_kickoff',
                participants: [
                    { name: 'Carlos L√≥pez', role: 'PM' },
                    { name: 'Ana Mart√≠n', role: 'Designer' },
                    { name: 'Luis P√©rez', role: 'Developer' }
                ],
                context: {
                    project: 'Desarrollo de Dashboard Analytics',
                    timeline: '3 meses',
                    budget: 12000,
                    technologies: ['React', 'Node.js', 'PostgreSQL']
                }
            },
            userId: 'test@example.com'
        };
        
        const response = await fetch(`${baseUrl}/api/ai/automations/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(meetingData)
        });
        
        const result = await response.json();
        console.log('‚úÖ Reuni√≥n programada exitosamente:');
        console.log('   üéØ T√≠tulo:', result.meeting?.meeting_title);
        console.log('   ‚è∞ Duraci√≥n:', result.meeting?.duration_minutes, 'minutos');
        console.log('   üìã Puntos de agenda:', result.meeting?.agenda?.length || 0);
        console.log('');
    } catch (error) {
        console.log('‚ùå Error:', error.message);
        console.log('');
    }
    
    // Prueba 4: Enlace de Calendario - Consulta Inicial
    console.log('üîó Prueba 4: Enlace de Calendario - Consulta Inicial');
    try {
        const calendarData = {
            type: 'calendar_link',
            data: {
                event_type: 'consultation',
                duration: 60,
                context: {
                    clientInquiry: 'Redise√±o completo de sitio web corporativo',
                    industry: 'Consultor√≠a Legal',
                    estimatedBudget: '‚Ç¨5,000 - ‚Ç¨10,000',
                    urgency: 'alta'
                }
            },
            userId: 'test@example.com'
        };
        
        const response = await fetch(`${baseUrl}/api/ai/automations/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(calendarData)
        });
        
        const result = await response.json();
        console.log('‚úÖ Enlace de calendario configurado:');
        console.log('   üìÖ Evento:', result.calendar?.event_title);
        console.log('   üìù Descripci√≥n personalizada:', result.calendar?.description?.slice(0, 80) + '...');
        console.log('   üéØ Objetivos:', result.calendar?.meeting_objectives?.slice(0, 2).join(', '));
        console.log('');
    } catch (error) {
        console.log('‚ùå Error:', error.message);
        console.log('');
    }
    
    console.log('üéâ Pruebas de workflows completadas!');
    console.log('üí° Estos workflows pueden activarse autom√°ticamente con eventos reales como:');
    console.log('   ‚Ä¢ Firma de contratos ‚Üí Email de bienvenida');
    console.log('   ‚Ä¢ Nuevo cliente ‚Üí Formulario de onboarding');
    console.log('   ‚Ä¢ Proyecto aprobado ‚Üí Reuni√≥n de kickoff');
    console.log('   ‚Ä¢ Lead calificado ‚Üí Enlace de calendario personalizado');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    testWorkflows().catch(console.error);
}

module.exports = { testWorkflows };
